#include "processing.h"

//잔액정보 추출
int Proc_Balance(char *Account)
{
	int balance = 0;
	FILE *fp;
	char path[100] = { NULL };	//경로입력

	HANDLE Semaphore_dest;

	strcat(path, ".\\계좌번호\\");
	strcat(path, Account);
	strcat(path, ".txt");


	//세마포어 핸들 생성
	Semaphore_dest = OpenSemaphore(SEMAPHORE_ALL_ACCESS, false, Account);

	if (Semaphore_dest == NULL)
		Semaphore_dest = CreateSemaphore(NULL, 1, 1, Account);

	//세마포어 락
	WaitForSingleObject(Semaphore_dest, INFINITE);

	//파일이 없을시 복귀
	if ((fp = fopen(path, "r")) == NULL)
	{
		//세마포어 언락
		ReleaseSemaphore(Semaphore_dest, 1, NULL);

		return 1;	//계좌번호가 존재하지 않음
	}
	fscanf(fp, "%s %s %d", path, path, &balance);		//계좌정보 추출

	//세마포어 언락
	ReleaseSemaphore(Semaphore_dest, 1, NULL);

	fclose(fp);
	return balance;
}

//계좌이체 처리
int Proc_Transfer(char *Account, char *target, int amount)
{
	FILE *fp_target;
	FILE *fp_own;

	char target_account[20] = { NULL };			//이체상대 계좌 보관
	char target_password[20] = { NULL };			//이체상대 비밀번호 보관
	char own_account[20] = { NULL };				//본인 계좌 보관
	char own_password[20] = { NULL };				//본인 비밀번호 보관

	char path_target[100] = { NULL };	//이체상대 계좌 경로
	char path_own[100] = { NULL };		//본인 계좌 경로
	int target_amount = 0;				//이체상대 계좌금액 보관
	int own_amount = 0;					//본인 계좌금액 보관

	HANDLE Semaphore_dest;
	HANDLE Semaphore_src;

	strcat(path_target, ".\\계좌번호\\");
	strcat(path_target, target);
	strcat(path_target, ".txt");

	strcat(path_own, ".\\계좌번호\\");
	strcat(path_own, Account);
	strcat(path_own, ".txt");

	//세마포어 생성(파일 2개)
	Semaphore_dest = OpenSemaphore(SEMAPHORE_ALL_ACCESS, false, Account);
	Semaphore_src = OpenSemaphore(SEMAPHORE_ALL_ACCESS, false, target);

	if (Semaphore_dest == NULL)
		Semaphore_dest = CreateSemaphore(NULL, 1, 1, Account);
	if (Semaphore_src == NULL)
		Semaphore_src = CreateSemaphore(NULL, 1, 1, target);

	//세마포어 락
	WaitForSingleObject(Semaphore_dest, INFINITE);
	WaitForSingleObject(Semaphore_src, INFINITE);

	//파일이 없을시 복귀
	if ((fp_target = fopen(path_target, "r")) == NULL)
	{
		//세마포어 언락
		ReleaseSemaphore(Semaphore_dest, 1, NULL);
		ReleaseSemaphore(Semaphore_src, 1, NULL);

		return 1;	//계좌번호가 존재하지 않음
	}

	fscanf(fp_target, "%s %s %d", target_account, target_password, &target_amount);
	fclose(fp_target);

	//파일이 없을시 복귀
	if ((fp_own = fopen(path_own, "r")) == NULL)
	{
		//세마포어 언락
		ReleaseSemaphore(Semaphore_dest, 1, NULL);
		ReleaseSemaphore(Semaphore_src, 1, NULL);

		return 1;	//계좌번호가 존재하지 않음
	}

	fscanf(fp_target, "%s %s %d", own_account, own_password, &own_amount);
	fclose(fp_own);


	//계좌금액 전송
	own_amount = own_amount - amount;
	target_amount = target_amount + amount;


	//상대 계좌 이체 결과 저장
	fp_target = fopen(path_target, "w");
	fprintf(fp_target, "%s %s %d", target_account, target_password, target_amount);
	

	//본인 계좌 이체 결과 저장
	fp_own = fopen(path_own, "w");
	fprintf(fp_own, "%s %s %d", own_account, own_password, own_amount);

	//세마포어 언락
	ReleaseSemaphore(Semaphore_dest, 1, NULL);
	ReleaseSemaphore(Semaphore_src, 1, NULL);

	fclose(fp_own);
	fclose(fp_target);

	return 0;
}

//이체내역 조회 처리(반환값 0이면 실패)
int Proc_History(char *Account, char **record)
{
	FILE *fp;
	char path[100] = { NULL };	//경로입력
	int fsize = 0;
	int i = 0;
	char buf;

	HANDLE Semaphore_dest;

	strcat(path, ".\\이체내역\\");
	strcat(path, Account);
	strcat(path, ".txt");

	//세마포어 생성
	Semaphore_dest = OpenSemaphore(SEMAPHORE_ALL_ACCESS, false, Account);

	if (Semaphore_dest == NULL)
		Semaphore_dest = CreateSemaphore(NULL, 1, 1, Account);

	//세마포어 락
	WaitForSingleObject(Semaphore_dest, INFINITE);

	//파일이 없을시 복귀
	if ((fp = fopen(path, "r")) == NULL)
		fp = fopen(path, "w");	//이체내역이 존재하지 않음

	fseek(fp, 0, SEEK_END);	//스트림 끝으로 이동
	fsize = ftell(fp);		//현재 포커스 위치 반환(바이트단위로 즉, 파일 크기)

	if (fsize == 0) //파일에 내용이 없으면
	{
		//세마포어 언락
		ReleaseSemaphore(Semaphore_dest, 1, NULL);

		return 0;
	}

	*record = (char *) malloc(fsize+1);	//마지막 NULL 자리까지해서 +1

	fseek(fp, 0, SEEK_SET);	//포커스 첫위치로 이동
	while ((buf = fgetc(fp)) != EOF)
	{
		if (buf == '\n')	//개행문자일경우 \n을 \r\n으로 변경
		{
			(*record)[i++] = '\r';
			(*record)[i++] = '\n';
		}
		else
			(*record)[i++] = buf;
	}

	(*record)[i] = NULL;	//문자열 마지막 NULL 처리

	//세마포어 언락
	ReleaseSemaphore(Semaphore_dest, 1, NULL);

	fclose(fp);
	return 1;
}
